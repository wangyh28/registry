apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-backend
  namespace: registry
spec:
  selector:
    matchLabels:
      app: registry-backend
  template:
    metadata:
      annotations:
        sidecar.istio.io/userVolume: '[{"name":"descriptor","configMap":{"name":"proto-descriptor","items":[{"key":"proto.pb","path":"proto.pb"}]}}]'
        sidecar.istio.io/userVolumeMount: '[{"name":"descriptor","mountPath":"/etc/envoy"}]'
      labels:
        app: registry-backend
    spec:
      serviceAccountName: registry-backend-asm
      containers:
      - name: registry-backend
        image: gcr.io/wangyh-playground/registry-backend:latest
        imagePullPolicy: Always
        env:
        - name: PORT
          value: "8080"
        - name: REGISTRY_DATABASE
          value: "cloudsqlpostgres"
        - name: REGISTRY_DBCONFIG
          value: "host=wangyh-playground:us-central1:registry-sql user=registry dbname=registry password=iloveapis sslmode=disable"
        - name: REGISTRY_LOG
          value: "debug"
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: registry-backend
  namespace: registry
  labels:
    app: registry-backend
    service: registry-backend
spec:
  #  type: LoadBalancer
  selector:
    app: registry-backend
  ports:
  - port: 80
    targetPort: 8080
    name: grpc
    protocol: TCP
---

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: registry-backend-vs
  namespace: registry
spec:
  hosts:
  - "*"
  gateways:
  - registry-backend-gateway
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: registry-backend
        port:
          number: 80
---

apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: registry-backend-gateway
  namespace: registry
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: grpc
      protocol: GRPC
    hosts:
    - "*"