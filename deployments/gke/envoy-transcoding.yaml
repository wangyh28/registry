# Created by github.com/tetratelabs/istio-tools/grpc-transcoder
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: registry-backend
  namespace: registry
spec:
  workloadLabels:
#    app: registry-backend
    transcode: http
  filters:
  - listenerMatch:
#      portNumber: 80
      listenerType: SIDECAR_INBOUND
    insertPosition:
      index: FIRST
#      relativeTo: envoy.router
    filterName: envoy.grpc_json_transcoder
    filterType: HTTP
    filterConfig:
      services: ["google.cloud.apigee.registry.v1.Registry"]
      printOptions:
        alwaysPrintPrimitiveFields: True
        addWhitespace: True
        alwaysPrintEnumsAsInts: false
        PreserveProtoFieldNames: false
      protoDescriptorBin: 
---
